#signals.py
import pyfirmata
import time 
comp='COM11'
board = pyfirmata.Arduino(comp)
led_1=board.get_pin('d:2:o')
led_2=board.get_pin('d:3:o')
led_3=board.get_pin('d:4:o')
led_4=board.get_pin('d:5:o')
led_5=board.get_pin('d:6:o')
led_6=board.get_pin('d:7:o')
l1=[0,0]
def normaltime():
    return 2
def maxtime():
    return 5
def val1():
    return l1[0]
def val2():
    return l1[1]
def signal1():
    l1[0]=1
    l1[1]=0
    led_2.write(0)
    led_5.write(0)
    led_3.write(1)
    led_4.write(1)
def wait():
    l1[0]=0
    l1[1]=0
    led_2.write(1)
    led_3.write(0)
    led_4.write(0)
    led_5.write(1)
    led_1.write(0)
    led_6.write(0)
def signal2():
    l1[0]=0
    l1[1]=1
    led_2.write(0)
    led_6.write(1)
    led_1.write(1)
    led_5.write(0)
def led_norm():
    l1[0]=1
    l1[1]=0
    led_2.write(0)
    led_5.write(0)
    led_3.write(1)
    led_4.write(1)
    time.sleep(5)
    led_2.write(1)
    led_3.write(0)
    led_4.write(0)
    led_5.write(1)
    time.sleep(1)
    l1[0]=1
    l1[1]=0
    led_2.write(0)
    led_6.write(1)
    led_1.write(1)
    led_5.write(0)
    time.sleep(5)
    led_2.write(1)
    led_1.write(0)
    led_6.write(0)
    led_5.write(1)
    time.sleep(1)
def signalmax_1():
    l1[0]=1
    l1[1]=0
    led_2.write(0)
    led_5.write(0)
    led_3.write(1)
    led_4.write(1)
    time.sleep(15)
    led_2.write(1)
    led_3.write(0)
    led_4.write(0)
    led_5.write(1)
    time.sleep(1)
    l1[0]=1
    l1[1]=0
    led_2.write(0)
    led_6.write(1)
    led_1.write(1)
    led_5.write(0)
    time.sleep(15)
    led_2.write(1)
    led_1.write(0)
    led_6.write(0)
    led_5.write(1)
    time.sleep(1)
def signalmax_2():
    l1[0]=1
    l1[1]=0
    led_2.write(0)
    led_5.write(0)
    led_3.write(1)
    led_4.write(1)
    time.sleep(15)
    led_2.write(1)
    led_3.write(0)
    led_4.write(0)
    led_5.write(1)
    time.sleep(1)
    l1[0]=1
    l1[1]=0
    led_2.write(0)
    led_6.write(1)
    led_1.write(1)
    led_5.write(0)
    time.sleep(15)
    led_2.write(1)
    led_1.write(0)
    led_6.write(0)
    led_5.write(1)
    time.sleep(1)
#v_d.py
import cv2
from signals import *
import time
cascade_src = 'cars.xml'
video_src = 'dataset/video.avi'
video_src1 = 'dataset/video1.avi'
l=[0,0]
cap = cv2.VideoCapture("dataset/video.avi")
cap1 = cv2.VideoCapture("dataset/video1.avi")
car_cascade = cv2.CascadeClassifier(cascade_src)
ret, img = cap.read()
ret1,img1 = cap1.read()
num=0
def returnval():
    return l[:]
def fun1(time1):
    now=time.time()
    timer = 0
    while timer<=time1:
        ret, img = cap.read()
        ret1,img1 = cap1.read()
        if (type(img) == type(None)):
            break
        if(type(img1)==type(None)):
            break
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        gray1 = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)
        #cv2.imshow('video', gray)
        cars = car_cascade.detectMultiScale(gray, 1.1, 1)
        cars1 = car_cascade.detectMultiScale(gray1, 1.1, 1)
        for (x,y,w,h) in cars:
            cv2.rectangle(img,(x,y),(x+w,y+h),(0,0,255),2)
        for (x,y,w,h) in cars1:
            cv2.rectangle(img1,(x,y),(x+w,y+h),(0,0,255),2)
        cv2.imshow('video', img)
        cv2.imshow('video1', img1)
        if(val1()==0):
            l[0]=len(cars)
        if(val2()==0):
            l[1]=len(cars1)
        if cv2.waitKey(33) == 27:
            break
        end = time.time()
        timer = round(end-now)
        print(timer)
    cv2.destroyAllWindows()
        #return num
#main.py
from vehicle_detection import *
from signals import *
import time
count=1
preval=[]
while True:
    if(count<=2):
        signal1()
        fun1(normaltime())
        wait()
        time.sleep(1)
        signal2()
        fun1(normaltime())
        wait()
        time.sleep(1)
        temp=returnval()
        preval.append(temp)
        count+=1
        print(preval)
    else:
        dif=preval[0][0]-preval[1][0]
        if(dif>=3):
            signal1()
            fun1(maxtime())
        else:
            signal1()
            fun1(normaltime())
        wait()
        time.sleep(1)
        dif=preval[0][1]-preval[1][1]
        if(dif>=1):
            signal2()
            fun1(maxtime())
        else:
            signal2()
            fun1(normaltime())
        wait()
        time.sleep(1)
        preval.pop(0)
        preval.append(returnval())
        print(count)
        print(preval)
            
    
      